{
  "test_cases": "2 7 11 15\n9\n0 1\n===\n3 2 4\n6\n1 2\n===\n3 3\n6\n0 1\n===\n1 5 3 7\n8\n0 3\n===\n1 2 3 4 5\n9\n3 4\n===\n5 75 25\n100\n1 2\n===\n0 4 3 0\n0\n0 3\n===\n-1 -2 -3 -4 -5\n-8\n2 4\n===\n1 2 5 6 10\n11\n2 4\n===\n2 8 12 16\n20\n1 2",
  "language": {
    "java": {
      "wrapper": "import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.function.*;\nimport java.util.regex.*;\nimport java.util.stream.*;\nimport static java.util.stream.Collectors.joining;\nimport static java.util.stream.Collectors.toList;\n\npublic class Main{\n    public static void main(String[] args) throws FileNotFoundException {\n\n               BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));\n        try {\n            StringBuilder testOutput = new StringBuilder();\n            String content = bufferedReader.lines().collect(Collectors.joining(\"\\n\"));\n            String[] testCases = content.split(\"===\\\\s*\");\n            for (String testCase : testCases) {\n                String[] lines = testCase.trim().split(\"\\n\");\n                if (lines.length < 3) continue;\n                int[] nums = Stream.of(lines[0].trim().split(\"\\\\s+\")).mapToInt(Integer::parseInt).toArray();\n                int target = Integer.parseInt(lines[1].trim());\n                int[] expected = Stream.of(lines[2].trim().split(\"\\\\s+\")).mapToInt(Integer::parseInt).toArray();\n                int[] result = Solution.twoSum(nums, target);\n                testOutput.append(\"actual:\").append(Arrays.toString(result)).append(\" | expected:\").append(Arrays.toString(expected)).append(\"\\n\");\n            }\n            System.out.println(testOutput);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}",
      "solution": "class Solution {\n   public static int[] twoSum(int[] nums, int target) {\n\t\tfor (int i = 0; i < nums.length; i++) {\n\t\t\tfor (int j = i+1; j < nums.length; j++) {\n\t\t\t\tif(nums[j] ==  target - nums[i] ) {\n\t\t\t\t\treturn new int[]{i,j};\n\t\t\t    }\n\t\t\t}\n\t\t}\n\t\treturn new int[] {0,0};\n    }\n}",
      "language_id": 62
    },
    "javascript": {
      "wrapper": "const fs = require('fs');\n\nfunction main() {\n  let input = '';\n  process.stdin.setEncoding('utf8');\n  process.stdin.on('data', function(chunk) {\n    input += chunk;\n  });\n  process.stdin.on('end', function() {\n    const testCases = input.split('===');\n    let testOutput = [];\n    for (let testCase of testCases) {\n      const lines = testCase.trim().split('\\n');\n      if (lines.length < 3) continue;\n      const nums = lines[0].trim().split(/\\s+/).map(Number);\n      const target = Number(lines[1].trim());\n      const expected = lines[2].trim().split(/\\s+/).map(Number);\n      const result = twoSum(nums, target);\n      testOutput.push(`actual:${JSON.stringify(result)} | expected:${JSON.stringify(expected)}`);\n    }\n    console.log(testOutput.join('\\n'));\n  });\n}\n\nfunction twoSum(nums, target) {\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j < nums.length; j++) {\n      if (nums[j] === target - nums[i]) {\n        return [i, j];\n      }\n    }\n  }\n  return [0, 0];\n}\n\nmain();\n",
      "solution": "function twoSum(nums, target) {\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j < nums.length; j++) {\n      if (nums[j] === target - nums[i]) {\n        return [i, j];\n      }\n    }\n  }\n  return [0, 0];\n}\n",
      "language_id": 63
    },
    "python": {
      "wrapper": "def main():\n    import sys\n    content = sys.stdin.read()\n    test_cases = content.split('===')\n    test_output = []\n    for test_case in test_cases:\n        lines = test_case.strip().split('\\n')\n        if len(lines) < 3:\n            continue\n        nums = list(map(int, lines[0].strip().split()))\n        target = int(lines[1].strip())\n        expected = list(map(int, lines[2].strip().split()))\n        result = two_sum(nums, target)\n        test_output.append(f\"actual:{result} | expected:{expected}\")\n    print('\\n'.join(test_output))\n\ndef two_sum(nums, target):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[j] == target - nums[i]:\n                return [i, j]\n    return [0, 0]\n\nif __name__ == \"__main__\":\n    main()\n",
      "solution": "def two_sum(nums, target):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[j] == target - nums[i]:\n                return [i, j]\n    return [0, 0]\n",
      "language_id": 71
    }
  }
}