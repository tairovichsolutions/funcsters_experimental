{
  "test_cases": "1 4 4 4 5\n4\n===\n3 3 2 3 5 6 3\n3\n===\n3 3 2 3 5 6 3\n3",
  "language": {
    "java": {
      "wrapper": "import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.function.*;\nimport java.util.regex.*;\nimport java.util.stream.*;\nimport static java.util.stream.Collectors.joining;\nimport static java.util.stream.Collectors.toList;\n\npublic class Main{\n    public static void main(String[] args) throws FileNotFoundException {\n\n        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));\n        try {\n            StringBuilder testOutput = new StringBuilder();\n            String content = bufferedReader.lines().collect(Collectors.joining(\"\\n\"));\n            String[] testCases = content.split(\"===\\\\s*\");\n            for (String testCase : testCases) {\n                String[] lines = testCase.trim().split(\"\\n\");\n                if (lines.length < 2) continue;\n                List<Integer> input = Stream.of(lines[0].trim().split(\"\\\\s+\")).map(Integer::parseInt).collect(Collectors.toList());\n                int expected = Integer.parseInt(lines[1].trim());\n                int result = Solution.migratoryBirds(input);\n                testOutput.append(\"actual:\").append(result).append(\" | expected:\").append(expected).append(\"\\n\");\n            }\n            System.out.println(testOutput);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}",
      "solution": "class Solution{\n    public static int migratoryBirds(List<Integer> arr) {\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int n : arr) {\n            map.put(n, map.getOrDefault(n, 0) + 1);\n        }\n        int max = 0, best = Integer.MAX_VALUE;\n        for (int k : map.keySet()) {\n            int freq = map.get(k);\n            if (freq > max || (freq == max && k < best)) {\n                max = freq;\n                best = k;\n            }\n        }\n        return best;\n    }\n}\n",
      "language_id": 62
    },
    "javascript": {
      "wrapper": "const readline = require('readline');\n\nconst rl = readline.createInterface({ input: process.stdin, output: process.stdout, terminal: false });\nconst arrs = [];\nrl.on('line', function(line) {\n    if (line.trim().length > 0) {\n        arrs.push(line.trim().split(/\\s+/).map(Number));\n    }\n});\nrl.on('close', function() {\n    let count = 1;\n    for (const arr of arrs) {\n        const result = migratoryBirds(arr);\n        if (result === 4) {\n            console.log(`Test ${count}: Passed. Your output: ${result} Expected output: 4`);\n        } else {\n            console.log(`Test ${count}: Failed. Your output: ${result} Expected output: 4`);\n        }\n        count++;\n    }\n});\n",
      "solution": "function migratoryBirds(arr) {\n    const freq = {};\n    for (const n of arr) {\n        freq[n] = (freq[n] || 0) + 1;\n    }\n    let max = 0, best = Infinity;\n    for (const k in freq) {\n        const count = freq[k];\n        const num = Number(k);\n        if (count > max || (count === max && num < best)) {\n            max = count;\n            best = num;\n        }\n    }\n    return best;\n}\n",
      "language_id": 63
    },
    "python": {
      "wrapper": "import sys\n\ndef main():\n    arrs = []\n    for line in sys.stdin:\n        line = line.strip()\n        if not line:\n            continue\n        try:\n            arr = list(map(int, line.split()))\n            arrs.append(arr)\n        except ValueError:\n            continue\n    count = 1\n    for sublist in arrs:\n        result = migratoryBirds(sublist)\n        if result == 4:\n            print(f\"Test {count}: Passed. Your output: {result} Expected output: 4\")\n        else:\n            print(f\"Test {count}: Failed. Your output: {result} Expected output: 4\")\n        count += 1\n\ndef migratoryBirds(arr):\n    from collections import Counter\n    count = Counter(arr)\n    max_freq = max(count.values())\n    best = min(k for k, v in count.items() if v == max_freq)\n    return best\n\nif __name__ == \"__main__\":\n    main()\n",
      "solution": "def migratoryBirds(arr):\n    from collections import Counter\n    count = Counter(arr)\n    max_freq = max(count.values())\n    best = min(k for k, v in count.items() if v == max_freq)\n    return best\n",
      "language_id": 71
    }
  }
}